{"version":3,"sources":["constants.js","utility.js","NotificationService.js","FilterOptions.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["VACCINE_REGISTRATION_URL","SERVER_API_URL","GET_STATES","GET_DISTRICTS","GET_CENTERS_BY_DISTRICT","GET_CENTERS_BY_DISTRICT_ADMIN","DEFAULT_STATE","DEFAULT_DISTRICTS_SELECTED","DEFAULT_VACCINE","DEFAULT_AGE","DEFAULT_DURATION","REFRESH_INTERVAL","REFRESH_INTERVAL_FAST","DEFAULT_NOTIFICATION_ENABLED","getCentersByDistrict","localStorage","getItem","getRefreshInterval","require","fetchCenters","districtList","month","a","promiseList","districtIndex","length","week","centerRequest","axios","get","params","district_id","date","moment","add","format","then","response","data","centers","catch","error","console","log","setTimeout","window","location","reload","push","Promise","all","allCentersList","allCenters","reduce","prev","curr","formatData","newCenters","newVaccines","Set","newAgeGroups","modifiedCenters","mergeDataByCenter","map","centerItem","index","availability","any_total","sessions","forEach","item","minAgeLimit","min_age_limit","availableNow","available_capacity","vaccineName","vaccine","any","vaccineTotalKey","centerIdMap","mergedCenters","centerIdIndex","center_id","undefined","oldData","deepmerge","NotificationService","props","vaccineSelected","ageGroupSelected","filterDataModel","shouldNotify","setShouldNotify","React","useState","isNotificationEnabled","setIsNotificationEnabled","swRegistration","setSwRegistration","availableVaccineCenters","setAvailableVaccineCenters","useEffect","setItem","newAvailableVaccineCenters","totalAvailableVaccines","notification","total","centerName","name","pincode","sort","navigator","serviceWorker","ready","registration","parsed","queryString","parse","search","godMode","sendNotification","showNotification","body","options","action","close","notificationCloseEvent","url","document","toString","persistent","lang","icon","handleNotificationButtonClick","notificationPermissionState","Notification","permission","alert","requestPermission","Button","variant","color","onClick","style","margin","height","minWidth","Icon","getNotificationButtonContent","fontSize","useStyles","makeStyles","theme","formControl","spacing","selectEmpty","marginTop","FilterOptions","classes","states","setStates","stateSelected","setStateSelected","districts","setDistricts","districtsSelected","setDistrictsSelected","setRawCenters","setCenters","vaccines","setVaccines","setVaccineSelected","ageGroup","setAgeGroup","setAgeGroupSelected","durationSelected","setDurationSelected","gridApi","setFilterDataModel","timeRemaining","setTimeRemaining","propsToPass","loadDistrictData","loadFreshData","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newTimeRemaining","saveFilterModel","currentFilterModel","getFilterModel","resetValuesOnDistrictChange","resetVaccineAndAge","newStateSelectedValue","shouldNotifyIfSlotsAvailable","districtsList","duration","resolve","rawCenterData","ageGroupMenuText","value","display","overflowX","marginRight","FormControl","className","InputLabel","Select","labelId","onChange","event","target","label","MenuItem","state_id","state_name","multiple","newDistrictsSelectedValue","renderValue","selected","district","some","district_name","slice","Checkbox","checked","indexOf","ListItemText","primary","centersCopy","Array","from","ageGroupItem","getTimeRemainingText","App","JSON","rawCenters","setGridApi","stringify","setFilterModel","dateMap","apply","parseInt","quantityRenderer","dataWithMapLinkWrapperRenderer","address","encodedData","encodeURIComponent","mapUrl","quantityStyle","commonStyles","justifyContent","fontWeight","border","backgroundColor","cursor","width","defaultColDef","floatingFilter","resizable","suppressMovable","enableCellTextSelection","defaultColGroupDef","marryChildren","animateRows","isExternalFilterPresent","doesExternalFilterPass","node","onGridReady","api","tooltipShowDelay","rowData","field","sortable","filter","cellRenderer","tooltipValueGetter","headerName","valueGetter","fee_type","vaccine_fees","fee","valueFormatter","cellStyle","dateItem","onCellClicked","querySelector","click","CircularProgress","alignSelf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1a877088.chunk.js","sourcesContent":["export const VACCINE_REGISTRATION_URL = 'https://selfregistration.cowin.gov.in/';\n\nexport const SERVER_API_URL = 'https://cdn-api.co-vin.in/api/v2';\n\nexport const GET_STATES = `${SERVER_API_URL}/admin/location/states`;\n\nexport const GET_DISTRICTS = `${SERVER_API_URL}/admin/location/districts`;\n\nexport const GET_CENTERS_BY_DISTRICT = `${SERVER_API_URL}/appointment/sessions/public/calendarByDistrict`;\n\nexport const GET_CENTERS_BY_DISTRICT_ADMIN = `${SERVER_API_URL}/appointment/sessions/calendarByDistrict`;\n\nexport const DEFAULT_STATE = '16';\n\nexport const DEFAULT_DISTRICTS_SELECTED = [294, 265, 276];\n\nexport const DEFAULT_VACCINE = 'any';\n\nexport const DEFAULT_AGE = 'all';\n\nexport const DEFAULT_DURATION = 1;\n\nexport const REFRESH_INTERVAL = 300;\n\nexport const REFRESH_INTERVAL_FAST = 10;\n\nexport const DEFAULT_NOTIFICATION_ENABLED = false;\n\nexport const getCentersByDistrict = () => {\n    return localStorage.getItem('godMode') === 'true' ? GET_CENTERS_BY_DISTRICT_ADMIN : GET_CENTERS_BY_DISTRICT;\n}\n\nexport const getRefreshInterval = () => {\n    return localStorage.getItem('godMode') === 'true' ? REFRESH_INTERVAL_FAST : REFRESH_INTERVAL;\n}\n","import {\n  useEffect,\n  useRef,\n} from 'react';\n\nimport axios from 'axios';\nimport deepmerge from 'deepmerge';\nimport moment from 'moment';\n\nconst { getCentersByDistrict, REFRESH_INTERVAL } = require(\"./constants\");\n\nexport const fetchCenters = async (districtList, month) => {\n  const promiseList = [];\n\n  for(let districtIndex = 0; districtIndex < districtList.length; districtIndex++) {\n    for(let week = 0; week < 4*month; week++) {\n      const centerRequest = axios.get(`${getCentersByDistrict()}`, {\n          params: {\n          district_id: districtList[districtIndex],\n          date: moment().add(7*week, 'days').format('DD-MM-YYYY')\n          }\n        })\n        .then((response) => response.data.centers)\n        .catch(error => {\n          console.log(error);\n          setTimeout(() => {\n            window.location.reload();\n          }, REFRESH_INTERVAL*1000);\n          return [];\n        });\n        promiseList.push(centerRequest);\n    }\n  }\n\n  const allCentersList = await Promise.all(promiseList);\n  const allCenters = allCentersList.reduce((prev, curr) => [...prev, ...curr], []);\n\n  return formatData(allCenters);\n}\n\nconst formatData = (newCenters) => {\n  const newVaccines = new Set();\n  const newAgeGroups = new Set();\n\n  const modifiedCenters = mergeDataByCenter(newCenters).map((centerItem, index) => {\n    let availability = {\n      all: {\n        any_total : 0,\n      },\n    };\n\n    centerItem.sessions.forEach(item => {\n      const minAgeLimit = item.min_age_limit;\n      const availableNow = item.available_capacity;\n      const vaccineName = item.vaccine;\n\n      newVaccines.add(vaccineName);\n      newAgeGroups.add(minAgeLimit);\n\n      availability = {\n        ...availability,\n        [minAgeLimit]: {\n          ...availability[minAgeLimit],\n          [vaccineName]: {\n            ...(availability[minAgeLimit]?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability[minAgeLimit]?.any),\n            [item.date]: availableNow,\n          }\n        },\n        all: {\n          ...availability.all,\n          [vaccineName]: {\n            ...(availability.all?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability.all?.any),\n            [item.date]: availableNow,\n          }\n        }\n      }\n\n      const vaccineTotalKey = `${vaccineName}_total`;\n      availability[minAgeLimit][vaccineTotalKey] = availability[minAgeLimit][vaccineTotalKey] ? availability[minAgeLimit][vaccineTotalKey] + availableNow : availableNow;\n      availability[minAgeLimit].any_total = availability[minAgeLimit].any_total ? availability[minAgeLimit].any_total + availableNow : availableNow;\n      availability.all[vaccineTotalKey] = availability.all[vaccineTotalKey] ? availability.all[vaccineTotalKey] + availableNow : availableNow;\n      availability.all.any_total += availableNow;\n    });\n    centerItem['availability'] = availability;\n    return centerItem;\n  });\n\n  return [newCenters, newVaccines, newAgeGroups, modifiedCenters];\n}\n\nconst mergeDataByCenter = (newCenters) => {\n  const centerIdMap = {};\n  const mergedCenters = [];\n\n  newCenters.forEach((centerItem, index) => {\n    const centerIdIndex = centerIdMap[centerItem.center_id];\n    if (centerIdIndex === undefined) {\n      mergedCenters.push(centerItem);\n      centerIdMap[centerItem.center_id] = mergedCenters.length - 1;\n    } else {\n      const oldData = mergedCenters[centerIdIndex];\n      mergedCenters[centerIdIndex] = deepmerge(oldData, centerItem);\n    }\n  });\n  return mergedCenters;\n}\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport const getNotificationBody = (newAvailableVaccineCenters) => {\n  return newAvailableVaccineCenters.reduce((prev, curr) => {\n    const {\n      total,\n      centerName,\n      pincode,\n    } = curr.notification;\n    const newVaccineEntry = `\\nCenter: ${centerName}\\nPincode: ${pincode}\\nSlots Available: ${total}\\n`;\n    return prev + newVaccineEntry;\n  }, '');\n}","import React, { useEffect } from 'react';\n\nimport queryString from 'query-string';\n\nimport {\n  Button,\n  Icon,\n} from '@material-ui/core';\n\nimport { DEFAULT_NOTIFICATION_ENABLED } from './constants';\nimport { getNotificationBody } from './utility';\n\nconst NotificationService = (props) => {\n\n  const {\n    centers,\n    vaccineSelected,\n    ageGroupSelected,\n    filterDataModel,\n    shouldNotify, setShouldNotify,\n  } = props;\n\n  const [isNotificationEnabled, setIsNotificationEnabled] = React.useState(localStorage.getItem('isNotificationEnabled') || DEFAULT_NOTIFICATION_ENABLED);\n  const [swRegistration, setSwRegistration] = React.useState(null); \n  const [availableVaccineCenters, setAvailableVaccineCenters] = React.useState([]);\n\n  useEffect(() => {\n    localStorage.setItem('isNotificationEnabled', isNotificationEnabled);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isNotificationEnabled]);\n\n  useEffect(() => {\n    let newAvailableVaccineCenters = centers?.reduce((prev, curr) => {\n      const totalAvailableVaccines = curr?.availability?.[ageGroupSelected]?.[`${vaccineSelected}_total`];\n      if (totalAvailableVaccines) {\n        const notification = {\n          total: totalAvailableVaccines,\n          centerName: curr.name,\n          pincode: curr.pincode,\n        };\n        curr.notification = notification;\n        prev.push(curr);\n      }\n      return prev;\n    }, []);\n\n    newAvailableVaccineCenters = newAvailableVaccineCenters?.sort(({ notification: { total: a } }, { notification: { total: b }}) => b - a);\n\n    setAvailableVaccineCenters(newAvailableVaccineCenters || []);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [centers, vaccineSelected, ageGroupSelected, filterDataModel]);\n\n  useEffect(() => {\n    navigator.serviceWorker.ready.then((registration) => {\n      setSwRegistration(registration);\n    });\n    const parsed = queryString.parse(window.location.search);\n    if (parsed.godMode !== undefined) {\n      localStorage.setItem('godMode', parsed.godMode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (shouldNotify) {\n      sendNotification();\n      setShouldNotify(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldNotify]);\n\n  const sendNotification = () => {\n    if (isNotificationEnabled && availableVaccineCenters?.length) {\n      swRegistration?.showNotification('Vaccine slots are available', {\n        // actions: [\n        //   { action: \"default\", title: \"Open\" },\n        // ],\n        body: getNotificationBody(availableVaccineCenters),\n        data: {\n          options: {\n            action: \"default\",\n            close: true,\n            notificationCloseEvent: false,\n            url: document.location.toString()\n          }\n        },\n        persistent: true,\n        lang: \"en-US\",\n        icon: \"https://ayushya.github.io/covid-vaccine-checker/logo512.png\"\n      });\n    }\n  }\n\n  const getNotificationButtonContent = () => {\n    const notificationPermissionState = Notification?.permission;\n    if (notificationPermissionState === \"denied\") {\n      return (\n        <>\n          <Icon>notifications_none</Icon>\n          <div>&nbsp; Notifications Blocked</div>\n        </>\n      );\n    }\n    if (notificationPermissionState === \"granted\" && isNotificationEnabled) {\n      return (\n        <>\n          <Icon>notifications_off</Icon>\n          <div>&nbsp; Stop Notifications</div>\n        </>\n      );\n    }\n    if (notificationPermissionState === \"default\" || !isNotificationEnabled) {\n      return (\n        <>\n          <Icon>notification_add</Icon>\n          <div>&nbsp; Get Notifications</div>\n        </>\n      );\n    }\n    else {\n      return (\n        <>\n          <Icon>notifications_none</Icon>\n          <div>&nbsp; Not Supported</div>\n        </>\n      );\n    }\n  }\n\n  const handleNotificationButtonClick = async () => {\n    const notificationPermissionState = Notification?.permission;\n    switch (true) {\n      case notificationPermissionState === 'denied': {\n        alert('Enable Notifications from browser\\'s Site Settings.\\nGoogle Search: \"Learn how to unblock notifications on browser\"');\n        return;\n      }\n      case notificationPermissionState === 'granted': {\n        setIsNotificationEnabled(!isNotificationEnabled);\n        return;\n      }\n      case notificationPermissionState === 'default': {\n        let newState = await Notification.requestPermission();\n        if (newState === 'granted') {\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.showNotification('You will receive a notification similar to this when a vaccine is available.');\n            setSwRegistration(registration);\n            setIsNotificationEnabled(true);\n          });\n        }\n        return;\n      }\n      default: {\n        alert('Notificatons aren\\'t supported in your browser, please use a Desktop');\n        return;\n      }\n    }\n  }\n\n  return (\n    <Button\n      variant=\"outlined\"\n      color=\"secondary\"\n      onClick={handleNotificationButtonClick}\n      style={{ margin: '8px', height: '56px', minWidth: '245px' }}\n    >\n      {getNotificationButtonContent()}\n      <span style={{fontSize: '8px', color: '#000'}}>&nbsp;(Beta)</span>\n    </Button>\n  )\n};\n\nexport default NotificationService;","import React, { useEffect } from 'react';\n\nimport axios from 'axios';\n\nimport {\n  Button,\n  Checkbox,\n  Icon,\n  ListItemText,\n  makeStyles,\n} from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_VACCINE,\n  GET_DISTRICTS,\n  GET_STATES,\n  getRefreshInterval,\n} from './constants';\nimport NotificationService from './NotificationService';\nimport {\n  fetchCenters,\n  useInterval,\n} from './utility';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst FilterOptions = (props) => {\n  const classes = useStyles();\n  \n  const {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    setRawCenters,\n    centers, setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected,\n    gridApi,\n    setFilterDataModel,\n  } = props;\n\n  const [timeRemaining, setTimeRemaining] = React.useState(getRefreshInterval());\n  const [shouldNotify, setShouldNotify] = React.useState(false);\n\n  const propsToPass = {\n    ...props,\n    shouldNotify, setShouldNotify,\n  };\n\n  useEffect(() => {\n    axios.get(GET_STATES)\n      .then((response) => {\n        setStates(response.data.states);\n      });\n    if (districtsSelected.length) {\n      loadDistrictData(stateSelected);\n      loadFreshData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useInterval(() => {\n    const newTimeRemaining = timeRemaining - 1;\n    if (newTimeRemaining === 0) {\n      if (districtsSelected.length) {\n        loadFreshData(true);\n      }\n    }\n    if (newTimeRemaining >= 0) {\n      setTimeRemaining(newTimeRemaining);\n    }\n  }, 1000);\n\n  const saveFilterModel = () => {\n    const currentFilterModel = gridApi?.getFilterModel() || {};\n    setFilterDataModel(currentFilterModel);\n  }\n\n  const resetValuesOnStateChange = () => {\n    setDistricts(null);\n    setDistrictsSelected([]);\n    resetValuesOnDistrictChange(true);\n  }\n\n  const resetValuesOnDistrictChange = (resetVaccineAndAge) => {\n    saveFilterModel();\n    setRawCenters(null);\n    setCenters(null);\n    if (resetVaccineAndAge) {\n      setVaccines(null);\n      setVaccineSelected(DEFAULT_VACCINE);\n      setAgeGroup(null);\n      setAgeGroupSelected(DEFAULT_AGE);\n    }\n  }\n\n  const handleStateChange = (event) => {\n    const newStateSelectedValue = event.target.value;\n    setStateSelected(newStateSelectedValue);\n    resetValuesOnStateChange();\n    loadDistrictData(newStateSelectedValue);\n  };\n\n  const loadDistrictData = (newStateSelectedValue) => {\n    axios.get(`${GET_DISTRICTS}/${newStateSelectedValue}`)\n      .then((response) => {\n        setDistricts(response.data.districts);\n      });\n  }\n\n  const loadFreshData = (shouldNotifyIfSlotsAvailable = false, resetVaccineAndAge = false, districtsList = districtsSelected, duration = durationSelected) => {\n    resetValuesOnDistrictChange(resetVaccineAndAge);\n    new Promise(async (resolve) => {\n      const [rawCenterData, newVaccines, newAgeGroups, modifiedCenters] = await fetchCenters(districtsList, duration);\n      setRawCenters(rawCenterData);\n      setCenters(modifiedCenters);\n      setVaccines(newVaccines);\n      setAgeGroup(newAgeGroups);\n      setTimeRemaining(getRefreshInterval());\n      if (shouldNotifyIfSlotsAvailable) {\n        setShouldNotify(true);\n      }\n      resolve();\n    })\n  }\n\n  const handleDistrictChange = (event) => {\n    const newDistrictsSelectedValue = event.target.value;\n    setDistrictsSelected(newDistrictsSelectedValue);\n    loadFreshData(false, true, newDistrictsSelectedValue, durationSelected);\n  };\n\n  const handleVaccineChange = (event) => {\n    saveFilterModel();\n    const value = event.target.value;\n    setVaccineSelected(value);\n    const centersCopy = centers;\n    setCenters(null);\n    setTimeout(() => {\n      setCenters(centersCopy);\n    }, 0);\n  };\n\n  const handleAgeGroupChange = (event) => {\n    saveFilterModel();\n    const value = event.target.value;\n    setAgeGroupSelected(value);\n    const centersCopy = centers;\n    setCenters(null);\n    setTimeout(() => {\n      setCenters(centersCopy);\n    }, 0);\n  }\n\n  const handleDurationChange = (event) => {\n    const value = event.target.value;\n    setDurationSelected(value);\n    loadFreshData(false, false, districtsSelected, value);\n  }\n\n  const ageGroupMenuText = (value) => {\n    switch (value) {\n      case 18: {\n        return '18-44';\n      }\n      case 45: {\n        return '45+';\n      }\n      default: {\n        return value;\n       }\n    }\n  }\n\n  const getTimeRemainingText = () => {\n    switch (timeRemaining) {\n      case 0: {\n        return 'Refreshing'\n      }\n      default: {\n        return `in ${timeRemaining} s`;\n      }\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', overflowX: 'auto', marginRight: '8px'}}>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">States</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={stateSelected}\n          onChange={handleStateChange}\n          label=\"State\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {\n            states?.map(({ state_id, state_name }, index) => <MenuItem key={index} value={state_id}>{state_name}</MenuItem>)\n          }\n        </Select>\n      </FormControl>\n      {\n        districts ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Districts</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              multiple\n              id=\"demo-simple-select-outlined\"\n              value={districtsSelected}\n              onChange={handleDistrictChange}\n              label=\"Districts\"\n              renderValue={(selected) => {\n                return districts.reduce((prev, district) => {\n                  if (selected.some((item) => district.district_id === item)) {\n                    return `${prev}, ${district.district_name}`;\n                  } else {\n                    return prev;\n                  } \n                }, '').slice(1);\n              }}\n            >\n              {\n                districts?.map(({ district_id, district_name }, index) => (\n                  <MenuItem key={index} value={district_id}>\n                    <Checkbox checked={districtsSelected.indexOf(district_id) > -1} />\n                    <ListItemText primary={district_name} />\n                  </MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Vaccines</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={vaccineSelected}\n              onChange={handleVaccineChange}\n              label=\"Vaccines\"\n            >\n              <MenuItem value={DEFAULT_VACCINE}>\n                <em>Any</em>\n              </MenuItem>\n              {\n                Array.from(vaccines)?.map((vaccine, index) => <MenuItem key={index} value={vaccine}>{vaccine}</MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        ageGroup ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Age Group</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={ageGroupSelected}\n              onChange={handleAgeGroupChange}\n              label=\"Age Group\"\n            >\n              <MenuItem value={DEFAULT_AGE}>\n                <em>All</em>\n              </MenuItem>\n              {\n                Array.from(ageGroup)?.map((ageGroupItem, index) => \n                <MenuItem key={index} value={ageGroupItem}>\n                    {ageGroupMenuText(ageGroupItem)}\n                </MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines && ageGroup ?\n          <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">Duration</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={durationSelected}\n                onChange={handleDurationChange}\n                label=\"Duration\"\n              >\n                <MenuItem value=\"1\">1 Month</MenuItem>\n                <MenuItem value=\"2\">2 Month</MenuItem>\n              </Select>\n            </FormControl>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => {\n                setTimeRemaining(0);\n                loadFreshData();\n              }}\n              style={{margin: '8px', height: '56px', minWidth: '152px'}}\n            >\n              <Icon >cached</Icon>\n              <div>&nbsp; {getTimeRemainingText()}</div>\n            </Button>\n            <NotificationService {...propsToPass} />\n          </>\n          :\n          null\n      }\n    </div>\n  )\n}\n\nexport default FilterOptions;","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport React, { useEffect } from 'react';\n\nimport {\n  AgGridColumn,\n  AgGridReact,\n} from 'ag-grid-react';\nimport moment from 'moment';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_DISTRICTS_SELECTED,\n  DEFAULT_DURATION,\n  DEFAULT_STATE,\n  DEFAULT_VACCINE,\n  VACCINE_REGISTRATION_URL,\n} from './constants';\nimport FilterOptions from './FilterOptions';\n\nconst App = () => {\n  const [states, setStates] =  React.useState(null);\n  const [stateSelected, setStateSelected] = React.useState(localStorage.getItem('stateSelected') || DEFAULT_STATE);\n  const [districts, setDistricts] = React.useState(null);\n  const [districtsSelected, setDistrictsSelected] = React.useState(JSON.parse(localStorage.getItem('districtsSelected')) || DEFAULT_DISTRICTS_SELECTED);\n  const [rawCenters, setRawCenters] = React.useState(null);\n  const [centers, setCenters] = React.useState(null);\n\n  const [vaccines, setVaccines] = React.useState(null);\n  const [vaccineSelected, setVaccineSelected] = React.useState(localStorage.getItem('vaccineSelected') || DEFAULT_VACCINE);\n\n  const [ageGroup, setAgeGroup] = React.useState(null);\n  const [ageGroupSelected, setAgeGroupSelected] = React.useState(localStorage.getItem('ageGroupSelected') || DEFAULT_AGE);\n\n  const [durationSelected, setDurationSelected] = React.useState(localStorage.getItem('durationSelected') || DEFAULT_DURATION);\n\n  const [gridApi, setGridApi] = React.useState(null);\n\n  const [filterDataModel, setFilterDataModel] = React.useState(JSON.parse(localStorage.getItem('filterDataModel')) || {});\n\n  const propsToPass = {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    rawCenters, setRawCenters,\n    centers, setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected,\n    gridApi, setGridApi,\n    filterDataModel, setFilterDataModel,\n  };\n\n  useEffect(() => {\n    localStorage.setItem('stateSelected', stateSelected);\n    localStorage.setItem('districtsSelected', JSON.stringify(districtsSelected));\n    localStorage.setItem('vaccineSelected', vaccineSelected);\n    localStorage.setItem('ageGroupSelected', ageGroupSelected);\n    localStorage.setItem('durationSelected', durationSelected);\n    localStorage.setItem('filterDataModel', JSON.stringify(filterDataModel));\n    setTimeout(() => {\n      gridApi?.setFilterModel(filterDataModel);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stateSelected, districtsSelected, vaccineSelected, ageGroupSelected, durationSelected, gridApi]);\n\n  const dateMap = Array.apply(null, new Array(7 * 4 * parseInt(durationSelected))).map((curr, index) => {\n    return moment().add(index, 'days').format('DD-MM-YYYY');\n  });\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n  }\n\n  const rowDataFilter = (node) => {\n    const total  = node.data.availability[ageGroupSelected]?.[`${vaccineSelected}_total`];\n    return total !== undefined\n  }\n\n  const quantityRenderer = ({ value }) => {\n    switch (value) {\n      case undefined: {\n        return 'NA';\n      }\n      case 0: {\n        return 'Booked';\n      }\n      default: {\n        return `<a href=${VACCINE_REGISTRATION_URL} target=\"_blank\" style=\"color:#fff; text-decoration: none\"}>${value}</a>`;\n      }\n    }\n  }\n\n  const dataWithMapLinkWrapperRenderer = ({data, value}) => {\n    const {\n      address,\n      name,\n      pincode,\n    } = data;\n    const encodedData = encodeURIComponent(`${name}, ${address}, ${pincode}`);\n    const mapUrl = `http://maps.google.com/?q=${encodedData}`;\n    return `<a href=${mapUrl} target=\"_blank\" style=\"color:#000; text-decoration: none\"}>${value}</a>`;\n  }\n\n  const quantityStyle = ({ value }) => {\n    const commonStyles = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case undefined: {\n        return { color: 'rgba(0, 0, 0, 0.87)', backgroundColor: '#e0e0e0', ...commonStyles };\n      }\n      case 0: {\n        return { color: '#fff', backgroundColor: 'rgb(220, 0, 78)', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#2ecc71', cursor: 'pointer', ...commonStyles };\n      }\n    }\n  }\n\n  const feeStyle = ({ value }) => {\n    const commonStyles = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case 'Free': {\n        return { color: '#fff', backgroundColor: '#2196f3', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#ff9800', ...commonStyles };\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FilterOptions {...propsToPass}/>\n      {\n        centers?.length ?\n          <div className=\"ag-theme-alpine\" style={{ height: 'calc(100vh - 72px)', width: '100%' }}>\n            <AgGridReact   \n              defaultColDef={{\n                width: 120,\n                // editable: true,\n                // filter: 'agTextColumnFilter',\n                floatingFilter: true,\n                resizable: true,\n                suppressMovable: true\n              }}\n              enableCellTextSelection={true}\n              defaultColGroupDef={{ marryChildren: true }}\n              animateRows={true}\n              isExternalFilterPresent={() => true}\n              doesExternalFilterPass={rowDataFilter}\n              onGridReady={onGridReady}\n              tooltipShowDelay={0}\n              rowData={centers}>\n              <AgGridColumn\n                field=\"pincode\"\n                sortable={true}\n                filter={true}\n                cellRenderer={dataWithMapLinkWrapperRenderer}\n                tooltipValueGetter={() => 'Open in Google Maps'}\n              />\n              <AgGridColumn\n                field=\"name\"\n                tooltipValueGetter={({value}) => `Where is ${value} ?`}\n                sortable={true}\n                filter={true}\n                width={200}\n                cellRenderer={dataWithMapLinkWrapperRenderer}\n              />\n              <AgGridColumn\n                headerName=\"Fee\"\n                field=\"fee_type\"\n                valueGetter={({ data: { fee_type, vaccine_fees}}) => vaccine_fees?.[0].fee || fee_type }\n                valueFormatter={({ data: { fee_type, vaccine_fees } }) => vaccine_fees ? `₹ ${vaccine_fees?.[0].fee}` : fee_type}\n                sortable={true}\n                filter={true}\n                cellStyle={feeStyle}\n              />\n              <AgGridColumn\n                headerName=\"# Total\"\n                field={`availability.${ageGroupSelected}.${vaccineSelected}_total`}\n                sortable={true}\n                filter={false}\n                width={120}\n                cellStyle={quantityStyle}\n                sort={'desc'}\n                cellRenderer={quantityRenderer}\n              />\n              {\n                dateMap?.map((dateItem, index) =>\n                  <AgGridColumn\n                    key={index}\n                    headerName={dateItem}\n                    field={`availability.${ageGroupSelected}.${vaccineSelected}.${dateItem}`}\n                    sortable={true}\n                    filter={false}\n                    width={130}\n                    cellStyle={quantityStyle}\n                    cellRenderer={quantityRenderer}\n                    onCellClicked={({event, value}) => {\n                      if (value > 0) {\n                        event.target.querySelector('a')?.click();\n                      }\n                    }}\n                  />\n                )\n              }\n            </AgGridReact>\n          </div> :\n          districtsSelected.length ?\n          <div style={{ height: 'calc(100vh - 72px)', width: '100%', display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress style={{ alignSelf: 'center' }} />\n          </div> :\n          null\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}