{"version":3,"sources":["utility.js","FilterOptions.js","App.js","reportWebVitals.js","index.js","constants.js"],"names":["GET_CENTERS_BY_DISTRICT","require","fetchCenters","districtList","month","a","promiseList","districtIndex","length","week","centerRequest","axios","get","params","district_id","date","moment","add","format","then","response","data","centers","catch","error","console","log","setTimeout","window","location","reload","push","Promise","all","allCentersList","allCenters","reduce","prev","curr","formatData","newCenters","newVaccines","Set","newAgeGroups","modifiedCenters","mergeDataByCenter","map","centerItem","index","availability","any_total","sessions","forEach","item","minAgeLimit","min_age_limit","availableNow","available_capacity","vaccineName","vaccine","any","vaccineTotalKey","centerIdMap","mergedCenters","centerIdIndex","center_id","undefined","oldData","deepmerge","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","FilterOptions","props","classes","states","setStates","stateSelected","setStateSelected","districts","setDistricts","districtsSelected","setDistrictsSelected","setRawCenters","setCenters","vaccines","setVaccines","vaccineSelected","setVaccineSelected","ageGroup","setAgeGroup","ageGroupSelected","setAgeGroupSelected","durationSelected","setDurationSelected","gridApi","setFilterDataModel","useEffect","GET_STATES","loadDistrictData","loadFreshData","saveFilterModel","currentFilterModel","getFilterModel","resetValuesOnDistrictChange","resetVaccineAndAge","DEFAULT_VACCINE","DEFAULT_AGE","newStateSelectedValue","GET_DISTRICTS","districtsList","duration","resolve","rawCenterData","ageGroupMenuText","value","FormControl","variant","className","InputLabel","id","Select","labelId","onChange","event","target","label","MenuItem","state_id","state_name","multiple","newDistrictsSelectedValue","renderValue","selected","district","some","district_name","slice","Checkbox","checked","indexOf","ListItemText","primary","centersCopy","Array","from","ageGroupItem","Button","color","onClick","style","height","Icon","App","React","useState","localStorage","getItem","DEFAULT_STATE","JSON","parse","DEFAULT_DISTRICTS_SELECTED","rawCenters","DEFAULT_DURATION","setGridApi","filterDataModel","propsToPass","setItem","stringify","setFilterModel","dateMap","apply","parseInt","quantityRenderer","VACCINE_REGISTRATION_URL","quantityStyle","commonStyles","display","justifyContent","fontWeight","border","backgroundColor","cursor","width","defaultColDef","floatingFilter","resizable","suppressMovable","enableCellTextSelection","defaultColGroupDef","marryChildren","animateRows","isExternalFilterPresent","doesExternalFilterPass","node","onGridReady","api","tooltipShowDelay","rowData","field","sortable","filter","pinned","tooltipField","headerName","valueGetter","fee_type","vaccine_fees","fee","valueFormatter","cellStyle","sort","cellRenderer","dateItem","onCellClicked","querySelector","click","CircularProgress","alignSelf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SERVER_API_URL"],"mappings":"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","file":"static/js/main.478dab4e.chunk.js","sourcesContent":["import {\n  useEffect,\n  useRef,\n} from 'react';\n\nimport axios from 'axios';\nimport deepmerge from 'deepmerge';\nimport moment from 'moment';\n\nconst { GET_CENTERS_BY_DISTRICT } = require(\"./constants\");\n\nexport const fetchCenters = async (districtList, month) => {\n  const promiseList = [];\n\n  for(let districtIndex = 0; districtIndex < districtList.length; districtIndex++) {\n    for(let week = 0; week < 4*month; week++) {\n      const centerRequest = axios.get(`${GET_CENTERS_BY_DISTRICT}`, {\n          params: {\n          district_id: districtList[districtIndex],\n          date: moment().add(7*week, 'days').format('DD-MM-YYYY')\n          }\n        })\n        .then((response) => response.data.centers)\n        .catch(error => {\n          console.log(error);\n          setTimeout(() => {\n            window.location.reload();\n          }, 10000);\n          return [];\n        });\n        promiseList.push(centerRequest);\n    }\n  }\n\n  const allCentersList = await Promise.all(promiseList);\n  const allCenters = allCentersList.reduce((prev, curr) => [...prev, ...curr], []);\n\n  return formatData(allCenters);\n}\n\nconst formatData = (newCenters) => {\n  const newVaccines = new Set();\n  const newAgeGroups = new Set();\n\n  const modifiedCenters = mergeDataByCenter(newCenters).map((centerItem, index) => {\n    let availability = {\n      all: {\n        any_total : 0,\n      },\n    };\n\n    centerItem.sessions.forEach(item => {\n      const minAgeLimit = item.min_age_limit;\n      const availableNow = item.available_capacity;\n      const vaccineName = item.vaccine;\n\n      newVaccines.add(vaccineName);\n      newAgeGroups.add(minAgeLimit);\n\n      availability = {\n        ...availability,\n        [minAgeLimit]: {\n          ...availability[minAgeLimit],\n          [vaccineName]: {\n            ...(availability[minAgeLimit]?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability[minAgeLimit]?.any),\n            [item.date]: availableNow,\n          }\n        },\n        all: {\n          ...availability.all,\n          [vaccineName]: {\n            ...(availability.all?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability.all?.any),\n            [item.date]: availableNow,\n          }\n        }\n      }\n\n      const vaccineTotalKey = `${vaccineName}_total`;\n      availability[minAgeLimit][vaccineTotalKey] = availability[minAgeLimit][vaccineTotalKey] ? availability[minAgeLimit][vaccineTotalKey] + availableNow : availableNow;\n      availability[minAgeLimit].any_total = availability[minAgeLimit].any_total ? availability[minAgeLimit].any_total + availableNow : availableNow;\n      availability.all[vaccineTotalKey] = availability.all[vaccineTotalKey] ? availability.all[vaccineTotalKey] + availableNow : availableNow;\n      availability.all.any_total += availableNow;\n    });\n    centerItem['availability'] = availability;\n    return centerItem;\n  });\n\n  return [newCenters, newVaccines, newAgeGroups, modifiedCenters];\n}\n\nconst mergeDataByCenter = (newCenters) => {\n  const centerIdMap = {};\n  const mergedCenters = [];\n\n  newCenters.forEach((centerItem, index) => {\n    const centerIdIndex = centerIdMap[centerItem.center_id];\n    if (centerIdIndex === undefined) {\n      mergedCenters.push(centerItem);\n      centerIdMap[centerItem.center_id] = mergedCenters.length - 1;\n    } else {\n      const oldData = mergedCenters[centerIdIndex];\n      mergedCenters[centerIdIndex] = deepmerge(oldData, centerItem);\n    }\n  });\n  return mergedCenters;\n}\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React, { useEffect } from 'react';\n\nimport axios from 'axios';\n\nimport {\n  Button,\n  Checkbox,\n  Icon,\n  ListItemText,\n  makeStyles,\n} from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_VACCINE,\n  GET_DISTRICTS,\n  GET_STATES,\n} from './constants';\nimport { fetchCenters } from './utility';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst FilterOptions = (props) => {\n  const classes = useStyles();\n  \n  const {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    setRawCenters,\n    centers, setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected,\n    gridApi,\n    setFilterDataModel,\n  } = props;\n\n  useEffect(() => {\n    axios.get(GET_STATES)\n      .then((response) => {\n        setStates(response.data.states);\n      });\n    if (districtsSelected.length) {\n      loadDistrictData(stateSelected);\n      loadFreshData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n  // useInterval(() => {\n  //   console.log('I am here', districtsSelected.length);\n  //   if (districtsSelected.length) {\n  //     console.log('I am here too');\n  //     loadFreshData(districtsSelected, durationSelected);\n  //   }\n  // }, 5000);\n\n  const saveFilterModel = () => {\n    const currentFilterModel = gridApi?.getFilterModel() || {};\n    setFilterDataModel(currentFilterModel);\n  }\n\n  const resetValuesOnStateChange = () => {\n    setDistricts(null);\n    setDistrictsSelected([]);\n    resetValuesOnDistrictChange(true);\n  }\n\n  const resetValuesOnDistrictChange = (resetVaccineAndAge) => {\n    saveFilterModel();\n    setRawCenters(null);\n    setCenters(null);\n    if (resetVaccineAndAge) {\n      setVaccines(null);\n      setVaccineSelected(DEFAULT_VACCINE);\n      setAgeGroup(null);\n      setAgeGroupSelected(DEFAULT_AGE);\n    }\n  }\n\n  const handleStateChange = (event) => {\n    const newStateSelectedValue = event.target.value;\n    setStateSelected(newStateSelectedValue);\n    resetValuesOnStateChange();\n    loadDistrictData(newStateSelectedValue);\n  };\n\n  const loadDistrictData = (newStateSelectedValue) => {\n    axios.get(`${GET_DISTRICTS}/${newStateSelectedValue}`)\n      .then((response) => {\n        setDistricts(response.data.districts);\n      });\n  }\n\n  const loadFreshData = (resetVaccineAndAge = false, districtsList = districtsSelected, duration = durationSelected) => {\n    resetValuesOnDistrictChange(resetVaccineAndAge);\n    new Promise(async (resolve) => {\n      const [rawCenterData, newVaccines, newAgeGroups, modifiedCenters] = await fetchCenters(districtsList, duration);\n      setRawCenters(rawCenterData);\n      setCenters(modifiedCenters);\n      setVaccines(newVaccines);\n      setAgeGroup(newAgeGroups);\n      resolve();\n    })\n  }\n\n  const handleDistrictChange = (event) => {\n    const newDistrictsSelectedValue = event.target.value;\n    setDistrictsSelected(newDistrictsSelectedValue);\n    loadFreshData(true, newDistrictsSelectedValue, durationSelected);\n  };\n\n  const handleVaccineChange = (event) => {\n    saveFilterModel();\n    const value = event.target.value;\n    setVaccineSelected(value);\n    const centersCopy = centers;\n    setCenters(null);\n    setTimeout(() => {\n      setCenters(centersCopy);\n    }, 0);\n  };\n\n  const handleAgeGroupChange = (event) => {\n    saveFilterModel();\n    const value = event.target.value;\n    setAgeGroupSelected(value);\n    const centersCopy = centers;\n    setCenters(null);\n    setTimeout(() => {\n      setCenters(centersCopy);\n    }, 0);\n  }\n\n  const handleDurationChange = (event) => {\n    const value = event.target.value;\n    setDurationSelected(value);\n    loadFreshData(false, districtsSelected, value);\n  }\n\n  const ageGroupMenuText = (value) => {\n    switch (value) {\n      case 18: {\n        return '18-44';\n      }\n      case 45: {\n        return '45+';\n      }\n      default: {\n        return value;\n       }\n    }\n  }\n\n  return (\n    <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">States</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={stateSelected}\n          onChange={handleStateChange}\n          label=\"State\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {\n            states?.map(({ state_id, state_name }, index) => <MenuItem key={index} value={state_id}>{state_name}</MenuItem>)\n          }\n        </Select>\n      </FormControl>\n      {\n        districts ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Districts</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              multiple\n              id=\"demo-simple-select-outlined\"\n              value={districtsSelected}\n              onChange={handleDistrictChange}\n              label=\"Districts\"\n              renderValue={(selected) => {\n                return districts.reduce((prev, district) => {\n                  if (selected.some((item) => district.district_id === item)) {\n                    return `${prev}, ${district.district_name}`;\n                  } else {\n                    return prev;\n                  } \n                }, '').slice(1);\n              }}\n            >\n              {\n                districts?.map(({ district_id, district_name }, index) => (\n                  <MenuItem key={index} value={district_id}>\n                    <Checkbox checked={districtsSelected.indexOf(district_id) > -1} />\n                    <ListItemText primary={district_name} />\n                  </MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Vaccines</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={vaccineSelected}\n              onChange={handleVaccineChange}\n              label=\"Vaccines\"\n            >\n              <MenuItem value={DEFAULT_VACCINE}>\n                <em>Any</em>\n              </MenuItem>\n              {\n                Array.from(vaccines)?.map((vaccine, index) => <MenuItem key={index} value={vaccine}>{vaccine}</MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        ageGroup ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Age Group</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={ageGroupSelected}\n              onChange={handleAgeGroupChange}\n              label=\"Age Group\"\n            >\n              <MenuItem value={DEFAULT_AGE}>\n                <em>All</em>\n              </MenuItem>\n              {\n                Array.from(ageGroup)?.map((ageGroupItem, index) => \n                <MenuItem key={index} value={ageGroupItem}>\n                    {ageGroupMenuText(ageGroupItem)}\n                </MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines && ageGroup ?\n          <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">Duration</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={durationSelected}\n                onChange={handleDurationChange}\n                label=\"Duration\"\n              >\n                <MenuItem value=\"1\">1 Month</MenuItem>\n                <MenuItem value=\"2\">2 Month</MenuItem>\n              </Select>\n            </FormControl>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => loadFreshData()}\n              style={{margin: '8px', height: '56px'}}\n            >\n              <Icon >cached</Icon>\n            </Button>\n          </>\n          :\n          null\n      }\n    </div>\n  )\n}\n\nexport default FilterOptions;","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport React, { useEffect } from 'react';\n\nimport {\n  AgGridColumn,\n  AgGridReact,\n} from 'ag-grid-react';\nimport moment from 'moment';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_DISTRICTS_SELECTED,\n  DEFAULT_DURATION,\n  DEFAULT_STATE,\n  DEFAULT_VACCINE,\n  VACCINE_REGISTRATION_URL,\n} from './constants';\nimport FilterOptions from './FilterOptions';\n\nconst App = () => {\n  const [states, setStates] =  React.useState(null);\n  const [stateSelected, setStateSelected] = React.useState(localStorage.getItem('stateSelected') || DEFAULT_STATE);\n  const [districts, setDistricts] = React.useState(null);\n  const [districtsSelected, setDistrictsSelected] = React.useState(JSON.parse(localStorage.getItem('districtsSelected')) || DEFAULT_DISTRICTS_SELECTED);\n  const [rawCenters, setRawCenters] = React.useState(null);\n  const [centers, setCenters] = React.useState(null);\n\n  const [vaccines, setVaccines] = React.useState(null);\n  const [vaccineSelected, setVaccineSelected] = React.useState(localStorage.getItem('vaccineSelected') || DEFAULT_VACCINE);\n\n  const [ageGroup, setAgeGroup] = React.useState(null);\n  const [ageGroupSelected, setAgeGroupSelected] = React.useState(localStorage.getItem('ageGroupSelected') || DEFAULT_AGE);\n\n  const [durationSelected, setDurationSelected] = React.useState(localStorage.getItem('durationSelected') || DEFAULT_DURATION);\n\n  const [gridApi, setGridApi] = React.useState(null);\n\n  const [filterDataModel, setFilterDataModel] = React.useState(JSON.parse(localStorage.getItem('filterDataModel')) || {});\n\n  const propsToPass = {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    rawCenters, setRawCenters,\n    centers, setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected,\n    gridApi, setGridApi,\n    filterDataModel, setFilterDataModel,\n  };\n\n  useEffect(() => {\n    localStorage.setItem('stateSelected', stateSelected);\n    localStorage.setItem('districtsSelected', JSON.stringify(districtsSelected));\n    localStorage.setItem('vaccineSelected', vaccineSelected);\n    localStorage.setItem('ageGroupSelected', ageGroupSelected);\n    localStorage.setItem('durationSelected', durationSelected);\n    localStorage.setItem('filterDataModel', JSON.stringify(filterDataModel));\n    setTimeout(() => {\n      gridApi?.setFilterModel(filterDataModel);\n    }, 0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stateSelected, districtsSelected, vaccineSelected, ageGroupSelected, durationSelected, gridApi]);\n\n  const dateMap = Array.apply(null, new Array(7 * 4 * parseInt(durationSelected))).map((curr, index) => {\n    return moment().add(index, 'days').format('DD-MM-YYYY');\n  });\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n  }\n\n  const rowDataFilter = (node) => {\n    const total  = node.data.availability[ageGroupSelected]?.[`${vaccineSelected}_total`];\n    return total !== undefined\n  }\n\n  const quantityRenderer = ({ value }) => {\n    switch (value) {\n      case undefined: {\n        return 'NA';\n      }\n      case 0: {\n        return 'Booked';\n      }\n      default: {\n        return `<a href=${VACCINE_REGISTRATION_URL} target=\"_blank\" style=\"color:#fff; text-decoration: none\"}>${value}</a>`;\n      }\n    }\n  }\n\n  const quantityStyle = ({ value }) => {\n    const commonStyles = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case undefined: {\n        return { color: 'rgba(0, 0, 0, 0.87)', backgroundColor: '#e0e0e0', ...commonStyles };\n      }\n      case 0: {\n        return { color: '#fff', backgroundColor: 'rgb(220, 0, 78)', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#2ecc71', cursor: 'pointer', ...commonStyles };\n      }\n    }\n  }\n\n  const feeStyle = ({ value }) => {\n    const commonStyles = {\n      display: 'flex',\n      justifyContent: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case 'Free': {\n        return { color: '#fff', backgroundColor: '#2196f3', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#ff9800', ...commonStyles };\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FilterOptions {...propsToPass}/>\n      {\n        centers?.length ?\n          <div className=\"ag-theme-alpine\" style={{ height: 'calc(100vh - 72px)', width: '100%' }}>\n            <AgGridReact   \n              defaultColDef={{\n                width: 120,\n                // editable: true,\n                // filter: 'agTextColumnFilter',\n                floatingFilter: true,\n                resizable: true,\n                suppressMovable: true\n              }}\n              enableCellTextSelection={true}\n              defaultColGroupDef={{ marryChildren: true }}\n              animateRows={true}\n              isExternalFilterPresent={() => true}\n              doesExternalFilterPass={rowDataFilter}\n              onGridReady={onGridReady}\n              tooltipShowDelay={0}\n              rowData={centers}>\n              <AgGridColumn field=\"pincode\" sortable={true} filter={true} pinned=\"left\"></AgGridColumn>\n              <AgGridColumn field=\"name\" tooltipField={\"name\"} sortable={true} filter={true} width={200} pinned=\"left\"></AgGridColumn>\n              <AgGridColumn\n                headerName=\"Fee\"\n                field=\"fee_type\"\n                valueGetter={({ data: { fee_type, vaccine_fees}}) => vaccine_fees?.[0].fee || fee_type }\n                valueFormatter={({ data: { fee_type, vaccine_fees } }) => vaccine_fees ? `₹ ${vaccine_fees?.[0].fee}` : fee_type}\n                sortable={true}\n                filter={true}\n                pinned=\"left\"\n                cellStyle={feeStyle}\n              />\n              <AgGridColumn\n                headerName=\"# Total\"\n                field={`availability.${ageGroupSelected}.${vaccineSelected}_total`}\n                sortable={true}\n                filter={false}\n                width={120}\n                pinned=\"left\"\n                cellStyle={quantityStyle}\n                sort={'desc'}\n                cellRenderer={quantityRenderer}\n              />\n              {\n                dateMap?.map((dateItem, index) =>\n                  <AgGridColumn\n                    key={index}\n                    headerName={dateItem}\n                    field={`availability.${ageGroupSelected}.${vaccineSelected}.${dateItem}`}\n                    sortable={true}\n                    filter={false}\n                    width={130}\n                    cellStyle={quantityStyle}\n                    cellRenderer={quantityRenderer}\n                    onCellClicked={({event, value}) => {\n                      if (value > 0) {\n                        event.target.querySelector('a')?.click();\n                      }\n                    }}\n                  />\n                )\n              }\n            </AgGridReact>\n          </div> :\n          districtsSelected.length ?\n          <div style={{ height: 'calc(100vh - 72px)', width: '100%', display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress style={{ alignSelf: 'center' }} />\n          </div> :\n          null\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const VACCINE_REGISTRATION_URL = 'https://selfregistration.cowin.gov.in/';\n\nexport const SERVER_API_URL = 'https://cdn-api.co-vin.in/api/v2';\n\nexport const GET_STATES = `${SERVER_API_URL}/admin/location/states`;\n\nexport const GET_DISTRICTS = `${SERVER_API_URL}/admin/location/districts`;\n\nexport const GET_CENTERS_BY_DISTRICT = `${SERVER_API_URL}/appointment/sessions/public/calendarByDistrict`;\n\nexport const DEFAULT_STATE = '16';\n\nexport const DEFAULT_DISTRICTS_SELECTED = [294, 265, 276];\n\nexport const DEFAULT_VACCINE = 'any';\n\nexport const DEFAULT_AGE = 'all';\n\nexport const DEFAULT_DURATION = 1;\n"],"sourceRoot":""}