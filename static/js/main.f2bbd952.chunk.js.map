{"version":3,"sources":["utility.js","FilterOptions.js","App.js","reportWebVitals.js","index.js","constants.js"],"names":["GET_CENTERS_BY_DISTRICT","require","fetchCenters","districtList","month","a","promiseList","districtIndex","length","week","centerRequest","axios","get","params","district_id","date","moment","add","format","then","response","data","centers","push","Promise","all","allCentersList","allCenters","reduce","prev","curr","formatData","newCenters","newVaccines","Set","newAgeGroups","modifiedCenters","mergeDataByCenter","map","centerItem","index","availability","any_total","sessions","forEach","item","minAgeLimit","min_age_limit","availableNow","available_capacity","vaccineName","vaccine","any","vaccineTotalKey","centerIdMap","mergedCenters","centerIdIndex","center_id","undefined","oldData","deepmerge","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","FilterOptions","props","classes","states","setStates","stateSelected","setStateSelected","districts","setDistricts","districtsSelected","setDistrictsSelected","setRawCenters","setCenters","vaccines","setVaccines","vaccineSelected","setVaccineSelected","ageGroup","setAgeGroup","ageGroupSelected","setAgeGroupSelected","durationSelected","setDurationSelected","useEffect","GET_STATES","resetValuesOnDistrictChange","DEFAULT_VACCINE","DEFAULT_AGE","loadFreshData","districtsList","duration","resolve","rawCenterData","ageGroupMenuText","value","FormControl","variant","className","InputLabel","id","Select","labelId","onChange","event","newStateSelectedValue","target","GET_DISTRICTS","label","MenuItem","state_id","state_name","multiple","newDistrictsSelectedValue","renderValue","selected","district","some","district_name","slice","Checkbox","checked","indexOf","ListItemText","primary","Array","from","ageGroupItem","App","React","useState","rawCenters","DEFAULT_DURATION","propsToPass","dateMap","apply","parseInt","quantityFormatter","quantityStyle","commonStyles","textAlign","fontWeight","border","color","backgroundColor","style","height","width","defaultColDef","floatingFilter","resizable","suppressMovable","enableCellTextSelection","defaultColGroupDef","marryChildren","animateRows","isExternalFilterPresent","doesExternalFilterPass","node","tooltipShowDelay","rowData","field","sortable","filter","pinned","tooltipField","headerName","valueGetter","fee_type","vaccine_fees","fee","valueFormatter","cellStyle","sort","dateItem","display","justifyContent","CircularProgress","alignSelf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SERVER_API_URL"],"mappings":"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","file":"static/js/main.f2bbd952.chunk.js","sourcesContent":["import axios from 'axios';\nimport deepmerge from 'deepmerge';\nimport moment from 'moment';\n\nconst { GET_CENTERS_BY_DISTRICT } = require(\"./constants\");\n\nexport const fetchCenters = async (districtList, month) => {\n  const promiseList = [];\n\n  for(let districtIndex = 0; districtIndex < districtList.length; districtIndex++) {\n    for(let week = 0; week < 4*month; week++) {\n      const centerRequest = axios.get(`${GET_CENTERS_BY_DISTRICT}`, {\n          params: {\n          district_id: districtList[districtIndex],\n          date: moment().add(7*week, 'days').format('DD-MM-YYYY')\n          }\n        })\n        .then((response) => response.data.centers);\n        promiseList.push(centerRequest);\n    }\n  }\n\n  const allCentersList = await Promise.all(promiseList);\n  const allCenters = allCentersList.reduce((prev, curr) => [...prev, ...curr], []);\n\n  return formatData(allCenters);\n}\n\nconst formatData = (newCenters) => {\n  const newVaccines = new Set();\n  const newAgeGroups = new Set();\n\n  const modifiedCenters = mergeDataByCenter(newCenters).map((centerItem, index) => {\n    let availability = {\n      all: {\n        any_total : 0,\n      },\n    };\n\n    centerItem.sessions.forEach(item => {\n      const minAgeLimit = item.min_age_limit;\n      const availableNow = item.available_capacity;\n      const vaccineName = item.vaccine;\n\n      newVaccines.add(vaccineName);\n      newAgeGroups.add(minAgeLimit);\n\n      availability = {\n        ...availability,\n        [minAgeLimit]: {\n          ...availability[minAgeLimit],\n          [vaccineName]: {\n            ...(availability[minAgeLimit]?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability[minAgeLimit]?.any),\n            [item.date]: availableNow,\n          }\n        },\n        all: {\n          ...availability.all,\n          [vaccineName]: {\n            ...(availability.all?.[vaccineName]),\n            [item.date]: availableNow,\n          },\n          any: {\n            ...(availability.all?.any),\n            [item.date]: availableNow,\n          }\n        }\n      }\n\n      const vaccineTotalKey = `${vaccineName}_total`;\n      availability[minAgeLimit][vaccineTotalKey] = availability[minAgeLimit][vaccineTotalKey] ? availability[minAgeLimit][vaccineTotalKey] + availableNow : availableNow;\n      availability[minAgeLimit].any_total = availability[minAgeLimit].any_total ? availability[minAgeLimit].any_total + availableNow : availableNow;\n      availability.all[vaccineTotalKey] = availability.all[vaccineTotalKey] ? availability.all[vaccineTotalKey] + availableNow : availableNow;\n      availability.all.any_total += availableNow;\n    });\n    centerItem['availability'] = availability;\n    return centerItem;\n  });\n\n  return [newCenters, newVaccines, newAgeGroups, modifiedCenters];\n}\n\nconst mergeDataByCenter = (newCenters) => {\n  const centerIdMap = {};\n  const mergedCenters = [];\n\n  newCenters.forEach((centerItem, index) => {\n    const centerIdIndex = centerIdMap[centerItem.center_id];\n    if (centerIdIndex === undefined) {\n      mergedCenters.push(centerItem);\n      centerIdMap[centerItem.center_id] = mergedCenters.length - 1;\n    } else {\n      const oldData = mergedCenters[centerIdIndex];\n      mergedCenters[centerIdIndex] = deepmerge(oldData, centerItem);\n    }\n  });\n  return mergedCenters;\n}","import React, { useEffect } from 'react';\n\nimport axios from 'axios';\n\nimport {\n  Checkbox,\n  ListItemText,\n  makeStyles,\n} from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_VACCINE,\n  GET_DISTRICTS,\n  GET_STATES,\n} from './constants';\nimport { fetchCenters } from './utility';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst FilterOptions = (props) => {\n  const classes = useStyles();\n  \n  const {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    setRawCenters,\n    setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected\n  } = props;\n\n  useEffect(() => {\n    axios.get(GET_STATES)\n      .then((response) => {\n        setStates(response.data.states);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const resetValuesOnStateChange = () => {\n    setDistricts(null);\n    setDistrictsSelected([]);\n    resetValuesOnDistrictChange();\n  }\n\n  const resetValuesOnDistrictChange = () => {\n    setRawCenters(null);\n    setCenters(null);\n    setVaccines(null);\n    setVaccineSelected(DEFAULT_VACCINE);\n    setAgeGroup(null);\n    setAgeGroupSelected(DEFAULT_AGE);\n  }\n\n  const handleStateChange = (event) => {\n    const newStateSelectedValue = event.target.value;\n    setStateSelected(newStateSelectedValue);\n    resetValuesOnStateChange();\n    axios.get(`${GET_DISTRICTS}/${newStateSelectedValue}`)\n      .then((response) => {\n        setDistricts(response.data.districts);\n      });\n  };\n\n  const loadFreshData = (districtsList, duration) => {\n    resetValuesOnDistrictChange();\n    new Promise(async (resolve) => {\n      const [rawCenterData, newVaccines, newAgeGroups, modifiedCenters] = await fetchCenters(districtsList, duration);\n      setRawCenters(rawCenterData);\n      setVaccines(newVaccines);\n      setAgeGroup(newAgeGroups);\n      setCenters(modifiedCenters);\n      resolve();\n    })\n  }\n\n  const handleDistrictChange = (event) => {\n    const newDistrictsSelectedValue = event.target.value;\n    setDistrictsSelected(newDistrictsSelectedValue);\n    loadFreshData(newDistrictsSelectedValue, durationSelected);\n  };\n\n  const handleVaccineChange = (event) => {\n    const value = event.target.value;\n    setVaccineSelected(value);\n  };\n\n  const handleAgeGroupChange = (event) => {\n    const value = event.target.value;\n    setAgeGroupSelected(value);\n  }\n\n  const handleDurationChange = (event) => {\n    const value = event.target.value;\n    setDurationSelected(value);\n    loadFreshData(districtsSelected, value);\n  }\n\n  const ageGroupMenuText = (value) => {\n    switch (value) {\n      case 18: {\n        return '18-44';\n      }\n      case 45: {\n        return '45+';\n      }\n      default: {\n        return value;\n       }\n    }\n  }\n\n  return (\n    <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">States</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={stateSelected}\n          onChange={handleStateChange}\n          label=\"State\"\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          {\n            states?.map(({ state_id, state_name }, index) => <MenuItem key={index} value={state_id}>{state_name}</MenuItem>)\n          }\n        </Select>\n      </FormControl>\n      {\n        districts ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Districts</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              multiple\n              id=\"demo-simple-select-outlined\"\n              value={districtsSelected}\n              onChange={handleDistrictChange}\n              label=\"Districts\"\n              renderValue={(selected) => {\n                return districts.reduce((prev, district) => {\n                  if (selected.some((item) => district.district_id === item)) {\n                    return `${prev}, ${district.district_name}`;\n                  } else {\n                    return prev;\n                  } \n                }, '').slice(1);\n              }}\n            >\n              {\n                districts?.map(({ district_id, district_name }, index) => (\n                  <MenuItem key={index} value={district_id}>\n                    <Checkbox checked={districtsSelected.indexOf(district_id) > -1} />\n                    <ListItemText primary={district_name} />\n                  </MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Vaccines</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={vaccineSelected}\n              onChange={handleVaccineChange}\n              label=\"Vaccines\"\n            >\n              <MenuItem value={DEFAULT_VACCINE}>\n                <em>Any</em>\n              </MenuItem>\n              {\n                Array.from(vaccines)?.map((vaccine, index) => <MenuItem key={index} value={vaccine}>{vaccine}</MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        ageGroup ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Age Group</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={ageGroupSelected}\n              onChange={handleAgeGroupChange}\n              label=\"Age Group\"\n            >\n              <MenuItem value={DEFAULT_AGE}>\n                <em>All</em>\n              </MenuItem>\n              {\n                Array.from(ageGroup)?.map((ageGroupItem, index) => \n                <MenuItem key={index} value={ageGroupItem}>\n                    {ageGroupMenuText(ageGroupItem)}\n                </MenuItem>)\n              }\n            </Select>\n          </FormControl> :\n          null\n      }\n      {\n        vaccines && ageGroup ?\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <InputLabel id=\"demo-simple-select-outlined-label\">Duration</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={durationSelected}\n              onChange={handleDurationChange}\n              label=\"Duration\"\n            >\n              <MenuItem value=\"1\">1 Month</MenuItem>\n              <MenuItem value=\"2\">2 Month</MenuItem>\n            </Select>\n          </FormControl> :\n          null\n      }\n    </div>\n  )\n}\n\nexport default FilterOptions;","import 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport React from 'react';\n\nimport {\n  AgGridColumn,\n  AgGridReact,\n} from 'ag-grid-react';\nimport moment from 'moment';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport {\n  DEFAULT_AGE,\n  DEFAULT_DURATION,\n  DEFAULT_VACCINE,\n} from './constants';\nimport FilterOptions from './FilterOptions';\n\nconst App = () => {\n  const [states, setStates] =  React.useState(null);\n  const [stateSelected, setStateSelected] = React.useState('');\n  const [districts, setDistricts] = React.useState(null);\n  const [districtsSelected, setDistrictsSelected] = React.useState([]);\n  const [rawCenters, setRawCenters] = React.useState(null);\n  const [centers, setCenters] = React.useState(null);\n\n  const [vaccines, setVaccines] = React.useState(null);\n  const [vaccineSelected, setVaccineSelected] = React.useState(DEFAULT_VACCINE);\n\n  const [ageGroup, setAgeGroup] = React.useState(null);\n  const [ageGroupSelected, setAgeGroupSelected] = React.useState(DEFAULT_AGE);\n\n  const [durationSelected, setDurationSelected] = React.useState(DEFAULT_DURATION);\n\n  const propsToPass = {\n    states, setStates,\n    stateSelected, setStateSelected,\n    districts, setDistricts,\n    districtsSelected, setDistrictsSelected,\n    rawCenters, setRawCenters,\n    centers, setCenters,\n    vaccines, setVaccines,\n    vaccineSelected, setVaccineSelected,\n    ageGroup, setAgeGroup,\n    ageGroupSelected, setAgeGroupSelected,\n    durationSelected, setDurationSelected\n  };\n\n  const dateMap = Array.apply(null, new Array(7 * 4 * parseInt(durationSelected))).map((curr, index) => {\n    return moment().add(index, 'days').format('DD-MM-YYYY');\n  });\n\n  const rowDataFilter = (node) => {\n    const total  = node.data.availability[ageGroupSelected]?.[`${vaccineSelected}_total`];\n    return total !== undefined\n  }\n\n  const quantityFormatter = ({value}) => {\n    switch (value) {\n      case undefined: {\n        return 'NA';\n      }\n      case 0: {\n        return 'Booked';\n      }\n      default: {\n        return value;\n      }\n    }\n  }\n\n  const quantityStyle = ({ value }) => {\n    const commonStyles = {\n      textAlign: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case undefined: {\n        return { color: 'rgba(0, 0, 0, 0.87)', backgroundColor: '#e0e0e0', ...commonStyles };\n      }\n      case 0: {\n        return { color: '#fff', backgroundColor: 'rgb(220, 0, 78)', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#2ecc71', ...commonStyles };\n      }\n    }\n  }\n\n  const feeStyle = ({ value }) => {\n    const commonStyles = {\n      textAlign: 'center',\n      fontWeight: '700',\n      border: '1px solid rgb(186, 191, 199)'\n    };\n    switch (value) {\n      case 'Free': {\n        return { color: '#fff', backgroundColor: '#2196f3', ...commonStyles };\n      }\n      default: {\n        return { color: '#fff', backgroundColor: '#ff9800', ...commonStyles };\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FilterOptions {...propsToPass}/>\n      {\n        centers?.length ?\n          <div className=\"ag-theme-alpine\" style={{ height: 'calc(100vh - 72px)', width: '100%' }}>\n            <AgGridReact   \n              defaultColDef={{\n                width: 120,\n                // editable: true,\n                // filter: 'agTextColumnFilter',\n                floatingFilter: true,\n                resizable: true,\n                suppressMovable: true\n              }}\n              enableCellTextSelection={true}\n              defaultColGroupDef={{ marryChildren: true }}\n              animateRows={true}\n              isExternalFilterPresent={() => true}\n              doesExternalFilterPass={rowDataFilter}\n              tooltipShowDelay={0}\n              rowData={centers}>\n              <AgGridColumn field=\"pincode\" sortable={true} filter={true} pinned=\"left\"></AgGridColumn>\n              <AgGridColumn field=\"name\" tooltipField={\"name\"} sortable={true} filter={true} width={200} pinned=\"left\"></AgGridColumn>\n              <AgGridColumn\n                headerName=\"Fee\"\n                field=\"fee_type\"\n                valueGetter={({ data: { fee_type, vaccine_fees}}) => vaccine_fees?.[0].fee || fee_type }\n                valueFormatter={({ data: { fee_type, vaccine_fees } }) => vaccine_fees ? `₹ ${vaccine_fees?.[0].fee}` : fee_type}\n                sortable={true}\n                filter={true}\n                pinned=\"left\"\n                cellStyle={feeStyle}\n              />\n              <AgGridColumn\n                headerName=\"# Total\"\n                field={`availability.${ageGroupSelected}.${vaccineSelected}_total`}\n                sortable={true}\n                filter={false}\n                width={120}\n                pinned=\"left\"\n                valueFormatter={quantityFormatter}\n                cellStyle={quantityStyle}\n                sort={'desc'}\n              />\n              {\n                dateMap?.map((dateItem, index) =>\n                  <AgGridColumn\n                    key={index}\n                    headerName={dateItem}\n                    field={`availability.${ageGroupSelected}.${vaccineSelected}.${dateItem}`}\n                    sortable={true}\n                    filter={false}\n                    width={130}\n                    valueFormatter={quantityFormatter}\n                    cellStyle={quantityStyle}\n                  />\n                )\n              }\n            </AgGridReact>\n          </div> :\n          districtsSelected.length ?\n          <div style={{ height: 'calc(100vh - 72px)', width: '100%', display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress style={{ alignSelf: 'center' }} />\n          </div> :\n          null\n      }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const SERVER_API_URL = 'https://cdn-api.co-vin.in/api/v2';\n\nexport const GET_STATES = `${SERVER_API_URL}/admin/location/states`;\n\nexport const GET_DISTRICTS = `${SERVER_API_URL}/admin/location/districts`;\n\nexport const GET_CENTERS_BY_DISTRICT = `${SERVER_API_URL}/appointment/sessions/public/calendarByDistrict`;\n\nexport const DEFAULT_VACCINE = 'any';\n\nexport const DEFAULT_AGE = 'all';\n\nexport const DEFAULT_DURATION = 1;\n"],"sourceRoot":""}